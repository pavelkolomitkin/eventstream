<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Event;
use AppBundle\Entity\User;
use Doctrine\ORM\Query\Expr;
use Doctrine\ORM\QueryBuilder;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends \Doctrine\ORM\EntityRepository
{
    const EVENT_TIME_FILTER_PAST = 'past';

    const EVENT_TIME_FILTER_FUTURE = 'future';

    public function getUserOwnEventsQuery(User $user, array $criteria = [])
    {
        $queryBuilder = $this
            ->createQueryBuilder('event')
            ->select('event as eventObject')
            ->where('event.owner = :user')
            ->setParameter('user', $user);

        $this->filterEventsByTime($queryBuilder, $criteria);
        $this->addMemberInfo($queryBuilder, $criteria);
        $this->addLikerInfo($queryBuilder, $criteria);

        $queryBuilder->orderBy('event.timeStart', 'DESC');

        return $queryBuilder->getQuery();
    }

    public function getEventListQuery(array $criteria = [])
    {
        $queryBuilder = $this
            ->createQueryBuilder('event')
            ->select('event as eventObject');

        $this->filterEventsByTime($queryBuilder, $criteria);
        $this->addMemberInfo($queryBuilder, $criteria);
        $this->addLikerInfo($queryBuilder, $criteria);

        $queryBuilder
            ->orderBy('event.timeStart', 'DESC')
            ->distinct();

        return $queryBuilder->getQuery();
    }

    public function getEventWithExtraUserRelativeData($eventId, User $user)
    {
        $queryBuilder = $this
            ->createQueryBuilder('event')
            ->select('event as eventObject');

        $this->addMemberInfo($queryBuilder, [
            'isMember' => $user
        ]);

        $this->addLikerInfo($queryBuilder, [
            'isLiker' => $user
        ]);

        $queryBuilder
            ->andWhere('event.id = :eventId')
            ->setParameter('eventId', $eventId)
            ->distinct();

        //$sql = $queryBuilder->getQuery()->getSQL();

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    private function addMemberInfo(QueryBuilder $builder, array $criteria)
    {
        if (isset($criteria['isMember']) && ($criteria['isMember'] instanceof User))
        {
            $builder
                ->leftJoin(
                    'event.members',
                    'currentUserMember',
                    Expr\Join::WITH,
                    'currentUserMember.id = :userId'
                )
                ->setParameter('userId', $criteria['isMember']->getId())
                //->addSelect("(case when currentUserMember.id is NULL then FALSE else TRUE end) as isMember");
                ->addSelect("currentUserMember.id as isMember");
        }

        return $builder;
    }

    private function addLikerInfo(QueryBuilder $builder, array $criteria)
    {
        if (isset($criteria['isLiker']) && ($criteria['isLiker'] instanceof User))
        {
            $builder
                ->leftJoin(
                    'event.likes',
                    'liker',
                    Expr\Join::WITH,
                    'liker.id = :userId'
                )
                ->setParameter('userId', $criteria['isLiker']->getId())
                ->addSelect("liker.id as isLiker");
        }

        return $builder;
    }

    /**
     * @param QueryBuilder $builder
     * @param array $criteria
     * @return QueryBuilder
     */
    private function filterEventsByTime(QueryBuilder $builder, array $criteria)
    {
        if (isset($criteria['time_filter']))
        {
            switch ($criteria['time_filter'])
            {
                case self::EVENT_TIME_FILTER_FUTURE:

                    $builder->andWhere('event.timeEnd > CURRENT_TIMESTAMP()');

                    break;

                case self::EVENT_TIME_FILTER_PAST:

                    $builder->andWhere('event.timeEnd < CURRENT_TIMESTAMP()');

                    break;
            }
        }

        return $builder;
    }

    public function hasEventMember(Event $event, User $member)
    {
        $existingMember = $this
            ->createQueryBuilder('event')
            ->innerJoin('event.members', 'member')
            ->andWhere('event = :eventObject')
            ->setParameter('eventObject', $event)
            ->getQuery()
            ->getOneOrNullResult();

        return !empty($existingMember);
    }
}
